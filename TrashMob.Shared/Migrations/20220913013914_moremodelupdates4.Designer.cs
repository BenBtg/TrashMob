// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrashMob.Shared.Persistence;

#nullable disable

namespace TrashMob.Migrations
{
    [DbContext(typeof(MobDbContext))]
    [Migration("20220913013914_moremodelupdates4")]
    partial class moremodelupdates4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TrashMob.Shared.Models.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CommunityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityStatusId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("CommunityAttachments");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommunityContactTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityContactTypeId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("CommunityContacts");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityContactType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CommunityContactTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Contact is not available",
                            DisplayOrder = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Contact is an official within the Community",
                            DisplayOrder = 2,
                            Name = "Official"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Contact is TrashMobHeadquarters",
                            DisplayOrder = 3,
                            Name = "TrashMobHQ"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Contact is a TrashMob Volunteer in the community",
                            DisplayOrder = 4,
                            Name = "TrashMob Volunteer"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Contact is a TrashMob Partner in the community",
                            DisplayOrder = 5,
                            Name = "TrashMob Partner"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("CommunityNotes");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("CommunityRequests");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CommunityStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Community is an active TrashMob community",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 0,
                            Description = "Community is not currently an active TrashMob community",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityUser", b =>
                {
                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CommunityId", "UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityUsers");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.ContactRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Message")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("ContactRequests");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEventPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MaxNumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventAttendee", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CanceledDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("SignUpDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventAttendees");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EventStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEventPublic")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MaxNumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("EventHistory", (string)null);
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaUsageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("MediaUsageTypeId");

                    b.ToTable("EventMedias");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventPartner", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventPartnerStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EventId", "PartnerId", "PartnerLocationId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EventPartnerStatusId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerLocationId");

                    b.ToTable("EventPartners");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventPartnerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventPartnerStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Partner has not been contacted",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "None"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Request is awaiting processing by partner",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Requested"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Request has been approved by partner",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Request has been declined by partner",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Declined"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Event is actively recruiting new members",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Event is full",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Full"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Event has been canceled",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Event has completed",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventSummary", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActualNumberOfAttendees")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("NumberOfBags")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBuckets")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("EventSummaries");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Park Cleanup",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Park Cleanup"
                        },
                        new
                        {
                            Id = 2,
                            Description = "School Cleanup",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "School Cleanup"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Neighborhood Cleanup",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Neighborhood Cleanup"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Beach Cleanup",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Beach Cleanup"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Highway Cleanup",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Highway Cleanup"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Natural Disaster Cleanup",
                            DisplayOrder = 6,
                            IsActive = true,
                            Name = "Natural Disaster Cleanup"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Trail Cleanup",
                            DisplayOrder = 7,
                            IsActive = true,
                            Name = "Trail Cleanup"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Reef Cleanup",
                            DisplayOrder = 8,
                            IsActive = true,
                            Name = "Reef Cleanup"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Private Land Cleanup",
                            DisplayOrder = 9,
                            IsActive = true,
                            Name = "Private Land Cleanup"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Dog Park Cleanup",
                            DisplayOrder = 10,
                            IsActive = true,
                            Name = "Dog Park Cleanup"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Waterway Cleanup",
                            DisplayOrder = 11,
                            IsActive = true,
                            Name = "Waterway Cleanup"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Vandalism Cleanup",
                            DisplayOrder = 12,
                            IsActive = true,
                            Name = "Vandalism Cleanup"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Social Event",
                            DisplayOrder = 13,
                            IsActive = true,
                            Name = "Social Event"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Other",
                            DisplayOrder = 14,
                            IsActive = true,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MediaType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Instagram Image or Video",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = 2,
                            Description = "YouTube Video",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "YouTube"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.MediaUsageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MediaUsageType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Before a cleanup event",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "BeforeEvent"
                        },
                        new
                        {
                            Id = 2,
                            Description = "After a cleanup event",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "AfterEvent"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.MessageRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("MessageRequests");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.NonEventUserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("SentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserNotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserNotificationTypeId");

                    b.ToTable("NonEventUserNotifications");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("PartnerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("PartnerStatusId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerLocations");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("PartnerRequestStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PrimaryPhone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SecondaryEmail")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("PartnerRequestStatusId");

                    b.ToTable("PartnerRequests");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PartnerRequestStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Request is Pending Approval by Site Administrator",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Request has been approved by the Site Administrator",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Request has been approved by the Site Administrator",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Denied"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PartnerStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Partner is Active",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Partner is Inactive",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerUser", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LastUpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastUpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PartnerId", "UserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PartnerUsers");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.SiteMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("MetricValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ProcessedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SiteMetrics");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateAgreedToPrivacyPolicy")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateAgreedToTermsOfService")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateAgreedToTrashMobWaiver")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("GivenName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsSiteAdmin")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("MemberSince")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("PrefersMetric")
                        .HasColumnType("bit");

                    b.Property<string>("PrivacyPolicyVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceSystemUserName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("SurName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("TermsOfServiceVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrashMobWaiverVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TravelLimitForLocalEvents")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            City = "Anytown",
                            Country = "AnyCountry",
                            Email = "info@trashmob.eco",
                            GivenName = "TrashMob",
                            IsSiteAdmin = false,
                            PrefersMetric = false,
                            Region = "AnyState",
                            SurName = "Eco",
                            TravelLimitForLocalEvents = 0,
                            UserName = "TrashMob"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("SentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserNotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserNotificationTypeId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.UserNotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserNotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Opt out of Post Event Summary",
                            DisplayOrder = 1,
                            Name = "EventSummaryAttendee"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Opt out of Event Summary Reminder for events you have lead",
                            DisplayOrder = 2,
                            Name = "EventSummaryHostReminder"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Opt out of notifications for events upcoming this week you are attending",
                            DisplayOrder = 3,
                            Name = "UpcomingEventAttendingThisWeek"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Opt out of notifications for events happening soon you are attending",
                            DisplayOrder = 4,
                            Name = "UpcomingEventAttendingSoon"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Opt out of notifications for events upcoming this week you are leading",
                            DisplayOrder = 5,
                            Name = "UpcomingEventHostingThisWeek"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Opt out of notifications for events happening soon you are leading",
                            DisplayOrder = 6,
                            Name = "UpcomingEventHostingSoon"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Opt out of notification for new events upcoming in your area this week",
                            DisplayOrder = 7,
                            Name = "UpcomingEventsInYourAreaThisWeek"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Opt out of notification for new events happening in your area soon",
                            DisplayOrder = 8,
                            Name = "UpcomingEventsInYourAreaSoon"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Opt out of Event Summary Week Reminder for events you have lead",
                            DisplayOrder = 9,
                            Name = "EventSummaryHostWeekReminder"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Opt out of notifications for User Profile Location",
                            DisplayOrder = 10,
                            Name = "UserProfileUpdateLocation"
                        });
                });

            modelBuilder.Entity("TrashMob.Shared.Models.Community", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.CommunityStatus", "CommunityStatus")
                        .WithMany("Communities")
                        .HasForeignKey("CommunityStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Communities_CommunityStatuses");

                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("CommunitiesCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Communities_ApplicationUser_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("CommunitiesUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Communities_ApplicationUser_LastUpdatedBy");

                    b.Navigation("CommunityStatus");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityAttachment", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityAttachments_Community");

                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("CommunityAttachmentsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityAttachments_ApplicationUser_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("CommunityAttachmentsUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityAttachments_ApplicationUser_LastUpdatedBy");

                    b.Navigation("Community");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityContact", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.CommunityContactType", "CommunityContactType")
                        .WithMany("CommunityContacts")
                        .HasForeignKey("CommunityContactTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityContacts_CommunityContactTypes");

                    b.HasOne("TrashMob.Shared.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityContacts_Community");

                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("CommunityContactsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityContacts_ApplicationUser_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("CommunityContactsUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityContacts_ApplicationUser_LastUpdatedBy");

                    b.Navigation("Community");

                    b.Navigation("CommunityContactType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityNote", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityNotes_Community");

                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("CommunityNotesCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityNotes_ApplicationUser_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("CommunityNotesUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityNotes_ApplicationUser_LastUpdatedBy");

                    b.Navigation("Community");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityRequest", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("CommunityRequestsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityRequests_CreatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityUser", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityUser_Communities");

                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("CommunityUsersCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityUsers_CreatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("CommunityUsersUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityUsers_LastUpdatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunityUser_User");

                    b.Navigation("Community");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.Event", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("EventsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_ApplicationUser_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.EventStatus", "EventStatus")
                        .WithMany("Events")
                        .HasForeignKey("EventStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Events_EventStatuses");

                    b.HasOne("TrashMob.Shared.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_EventTypes");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("EventsUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_ApplicationUser_LastUpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EventStatus");

                    b.Navigation("EventType");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventAttendee", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventAttendees_Events");

                    b.HasOne("TrashMob.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventAttendees_ApplicationUser");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventMedia", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("EventMedias")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventMedias_User_Id");

                    b.HasOne("TrashMob.Shared.Models.Event", "Event")
                        .WithMany("EventMedias")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventMedia_Event_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrashMob.Shared.Models.MediaType", "MediaType")
                        .WithMany("EventMedias")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EventMedias_MediaTypes");

                    b.HasOne("TrashMob.Shared.Models.MediaUsageType", "MediaUsageType")
                        .WithMany("EventMedias")
                        .HasForeignKey("MediaUsageTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EventMedias_MediaUsageTypes");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("MediaType");

                    b.Navigation("MediaUsageType");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventPartner", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("EventPartnersCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPartners_User_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPartners_Events");

                    b.HasOne("TrashMob.Shared.Models.EventPartnerStatus", "EventPartnerStatus")
                        .WithMany("EventPartners")
                        .HasForeignKey("EventPartnerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventPartners_EventPartnerStatuses");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("EventPartnersUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPartners_User_LastUpdatedBy");

                    b.HasOne("TrashMob.Shared.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPartners_Partners");

                    b.HasOne("TrashMob.Shared.Models.PartnerLocation", "PartnerLocation")
                        .WithMany()
                        .HasForeignKey("PartnerLocationId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPartners_PartnerLocations");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("EventPartnerStatus");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Partner");

                    b.Navigation("PartnerLocation");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventSummary", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("EventSummariesCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventSummaries_User_CreatedBy");

                    b.HasOne("TrashMob.Shared.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventSummary_Events");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("EventSummariesUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventSummaries_User_LastUpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.NonEventUserNotification", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "User")
                        .WithMany("NonEventUserNotifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NonEventUserNotifications_User_Id");

                    b.HasOne("TrashMob.Shared.Models.UserNotificationType", "UserNotificationType")
                        .WithMany("NonEventUserNotifications")
                        .HasForeignKey("UserNotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_NonEventUserNotifications_UserNotificationTypes");

                    b.Navigation("User");

                    b.Navigation("UserNotificationType");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.Partner", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("PartnersCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Partners_CreatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("PartnersUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Partners_LastUpdatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.PartnerStatus", "PartnerStatus")
                        .WithMany("Partners")
                        .HasForeignKey("PartnerStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Partners_PartnerRequestStatus");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("PartnerStatus");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerLocation", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("PartnerLocationsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerLocations_CreatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("PartnerLocationsUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerLocations_LastUpdatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerLocations_Partners");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerRequest", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("PartnerRequestsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerRequests_CreatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("PartnerRequestsUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerRequests_LastUpdatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.PartnerRequestStatus", "PartnerRequestStatus")
                        .WithMany("PartnerRequests")
                        .HasForeignKey("PartnerRequestStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerRequests_PartnerRequestStatus");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("PartnerRequestStatus");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerUser", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.User", "CreatedByUser")
                        .WithMany("PartnerUsersCreated")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerUsers_CreatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "LastUpdatedByUser")
                        .WithMany("PartnerUsersUpdated")
                        .HasForeignKey("LastUpdatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerUsers_LastUpdatedByUser_Id");

                    b.HasOne("TrashMob.Shared.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerUser_Partners");

                    b.HasOne("TrashMob.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PartnerUser_User");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Partner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.UserNotification", b =>
                {
                    b.HasOne("TrashMob.Shared.Models.Event", "Event")
                        .WithMany("UserNotifications")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotifications_Event_Id");

                    b.HasOne("TrashMob.Shared.Models.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotifications_User_Id");

                    b.HasOne("TrashMob.Shared.Models.UserNotificationType", "UserNotificationType")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserNotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserNotifications_UserNotificationTypes");

                    b.Navigation("Event");

                    b.Navigation("User");

                    b.Navigation("UserNotificationType");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityContactType", b =>
                {
                    b.Navigation("CommunityContacts");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.CommunityStatus", b =>
                {
                    b.Navigation("Communities");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.Event", b =>
                {
                    b.Navigation("EventMedias");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventPartnerStatus", b =>
                {
                    b.Navigation("EventPartners");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.MediaType", b =>
                {
                    b.Navigation("EventMedias");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.MediaUsageType", b =>
                {
                    b.Navigation("EventMedias");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerRequestStatus", b =>
                {
                    b.Navigation("PartnerRequests");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.PartnerStatus", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.User", b =>
                {
                    b.Navigation("CommunitiesCreated");

                    b.Navigation("CommunitiesUpdated");

                    b.Navigation("CommunityAttachmentsCreated");

                    b.Navigation("CommunityAttachmentsUpdated");

                    b.Navigation("CommunityContactsCreated");

                    b.Navigation("CommunityContactsUpdated");

                    b.Navigation("CommunityNotesCreated");

                    b.Navigation("CommunityNotesUpdated");

                    b.Navigation("CommunityRequestsCreated");

                    b.Navigation("CommunityUsersCreated");

                    b.Navigation("CommunityUsersUpdated");

                    b.Navigation("EventMedias");

                    b.Navigation("EventPartnersCreated");

                    b.Navigation("EventPartnersUpdated");

                    b.Navigation("EventSummariesCreated");

                    b.Navigation("EventSummariesUpdated");

                    b.Navigation("EventsCreated");

                    b.Navigation("EventsUpdated");

                    b.Navigation("NonEventUserNotifications");

                    b.Navigation("PartnerLocationsCreated");

                    b.Navigation("PartnerLocationsUpdated");

                    b.Navigation("PartnerRequestsCreated");

                    b.Navigation("PartnerRequestsUpdated");

                    b.Navigation("PartnerUsersCreated");

                    b.Navigation("PartnerUsersUpdated");

                    b.Navigation("PartnersCreated");

                    b.Navigation("PartnersUpdated");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("TrashMob.Shared.Models.UserNotificationType", b =>
                {
                    b.Navigation("NonEventUserNotifications");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
